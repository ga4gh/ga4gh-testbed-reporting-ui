{"version":3,"sources":["lib/styles/common/navigation/testbedReportingAppBarStyles.js","lib/components/common/navigation/TestbedReportingAppBar.js","lib/styles/common/layout/pageContainerStyles.js","lib/components/common/layout/PageContainer.js","lib/components/pages/Home.js","lib/styles/common/info/statusAlertStyles.js","lib/components/common/info/StatusAlert.js","lib/constants/defaultReports.js","lib/styles/common/info/progressBarStyles.js","lib/components/common/info/ProgressBar.js","lib/components/common/info/StatusChip.js","lib/styles/common/info/statusTableStyles.js","lib/styles/common/navigation/reportButtonStyles.js","lib/components/common/navigation/ReportButton.js","lib/utils/stringUtils.js","lib/components/common/info/StatusTable.js","lib/styles/common/info/reportInfoTableStyles.js","lib/components/common/info/ReportInfoTable.js","lib/styles/common/navigation/reportBreadcrumbsStyles.js","lib/components/common/navigation/ReportBreadcrumbs.js","lib/utils/dateUtils.js","lib/styles/common/navigation/reportButtonGroupStyles.js","lib/styles/pages/report/caseStyles.js","lib/components/pages/report/Log.js","lib/components/pages/report/Case.js","lib/styles/pages/report/testStyles.js","lib/components/pages/report/Test.js","lib/styles/pages/report/phaseStyles.js","lib/components/pages/report/Phase.js","lib/utils/reportUtils.js","lib/components/common/info/HelpBubble.js","lib/components/pages/report/Report.js","lib/styles/theme.js","App.js","reportWebVitals.js","index.js"],"names":["testbedReportingAppBarStyles","makeStyles","theme","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","heading","marginLeft","link","color","textDecoration","TestbedReportingAppBar","classes","AppBar","position","className","Toolbar","Typography","variant","to","pageContainerStyles","PageContainer","props","Container","maxWidth","children","Home","Button","component","Link","statusAlertStyles","sizeFull","width","marginTop","sizeMedium","sizeSmall","StatusAlert","text","reportLevel","status","widthClasses","full","medium","small","Alert","size","severity","PASS","WARN","FAIL","SKIP","defaultReport","schema_name","schema_version","testbed_name","testbed_version","testbed_description","platform_name","platform_description","input_parameters","token","url","start_time","end_time","summary","unknown","passed","warned","failed","skipped","phases","phase_name","phase_description","tests","test_name","test_description","cases","case_name","case_description","log_messages","message","progressBarStyles","div","height","cellPass","backgroundColor","palette","success","light","border","main","display","cellWarn","warning","cellFail","error","cellSkip","info","ProgressBar","cellClasses","console","log","map","testCase","i","widthPercent","length","styles","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","Tooltip","style","StatusChip","icons","Chip","icon","label","statusTableStyles","table","passRow","borderBottom","warnRow","failRow","skipRow","reportButtonStyles","button","margin","ReportButton","useColor","undefined","startIcon","useIcon","href","formatForDomId","stringArray","s","toLowerCase","replaceAll","join","StatusTable","rowClasses","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","phase","phaseRow","testAndCaseRows","test","testRow","caseRows","reportInfoTableStyles","ReportInfoTable","header","hc","rows","row","value","reportBreadcrumbsStyles","reportBreadcrumbs","fontSize","primary","ReportBreadcrumbs","id","Breadcrumbs","separator","breadcrumbs","item","days","group","textAlign","months","addLeadingChars","leadingChar","totalN","string","repeat","formatDate","dateString","d","Date","getUTCDay","getUTCMonth","getUTCDate","getUTCFullYear","getUTCHours","toString","getUTCMinutes","getUTCSeconds","caseStyles","paddingLeft","paddingTop","paddingBottom","Log","messages","Case","phaseName","testName","testStyles","Test","Grid","container","xs","phaseStyles","Phase","flattenReportCases","report","forEach","newCase","push","HelpBubble","Help","Report","useParams","reportObj","testbedId","seriesId","reportId","reportInfo","inputParameterInfo","Object","keys","key","createTheme","neutral","secondary","contrastText","typography","fontFamily","App","ThemeProvider","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4323e094.chunk.js","sourcesContent":["import { makeStyles } from '@mui/styles';\n\nconst testbedReportingAppBarStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginBottom: 50\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    heading: {\n        marginLeft: 20,\n        marginRight: 20\n    },\n    link: {\n        color: 'inherit',\n        textDecoration: 'none'\n    }\n}));\n\nexport default testbedReportingAppBarStyles;\n","import React from 'react';\nimport {\n    AppBar,\n    Toolbar,\n    Typography\n} from '@mui/material';\nimport {\n    Link\n} from 'react-router-dom'\nimport testbedReportingAppBarStyles from '../../../styles/common/navigation/testbedReportingAppBarStyles';\n\nconst TestbedReportingAppBar = () => {\n    const classes = testbedReportingAppBarStyles();\n\n    return (\n        <AppBar position=\"static\" className={classes.root}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.heading}>\n                    <Link to='/' className={classes.link}>\n                        GA4GH Testbed\n                    </Link>\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default TestbedReportingAppBar;\n","import { makeStyles } from '@mui/styles';\n\nconst pageContainerStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: '50px'\n    }\n}));\n\nexport default pageContainerStyles;\n","import React from 'react';\nimport { Container } from '@mui/material';\nimport pageContainerStyles from '../../../styles/common/layout/pageContainerStyles';\n\nconst PageContainer = props => {\n    const classes = pageContainerStyles();\n    return (\n        <Container maxWidth=\"lg\" className={classes.root}>\n            {props.children}\n        </Container>\n    )\n}\n\nexport default PageContainer;\n","import React from 'react';\nimport {\n    Typography,\n    Button\n} from '@mui/material';\nimport {\n    Link\n} from 'react-router-dom'\nimport { PageContainer } from '../common/layout';\n\nconst Home = props => {\n    return (\n        <PageContainer>\n            <Typography variant=\"h5\">Future Home of the GA4GH Testbed</Typography>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                component={Link}\n                to=\"/testbeds/testbedId/series/seriesId/reports/reportId\"\n            >\n                View Sample Report\n            </Button>\n        </PageContainer>\n    )\n    \n}\n\nexport default Home;","import { makeStyles } from '@mui/styles';\n\nconst statusAlertStyles = makeStyles((theme) => ({\n    sizeFull: {\n        width: \"100%\",\n        marginTop: 25,\n        marginBottom: 25\n    },\n    sizeMedium: {\n        maxWidth: '50%',\n        marginTop: 25,\n        marginBottom: 25\n    },\n    sizeSmall: {\n        maxWidth: '25%',\n        marginTop: 25,\n        marginBottom: 25\n    }\n}))\n\nexport default statusAlertStyles;","import React from 'react';\nimport { Alert } from '@mui/material';\nimport statusAlertStyles from '../../../styles/common/info/statusAlertStyles';\n\nconst StatusAlert = props => {\n    const classes = statusAlertStyles();\n\n    const text = `${props.reportLevel} Status: ${props.status}`;\n    const severities = {\n        PASS: \"success\",\n        WARN: \"warning\",\n        FAIL: \"error\",\n        SKIP: \"info\"\n    }\n    const widthClasses = {\n        full: classes.sizeFull,\n        medium: classes.sizeMedium,\n        small: classes.sizeSmall\n    }\n    const variant = props.variant || \"filled\"\n\n    return (\n        <Alert\n            className={widthClasses[props.size]}\n            severity={severities[props.status]}\n            variant={variant}\n        >\n            {text}\n        </Alert>\n    )\n}\n\nexport default StatusAlert;","const defaultReport = {\n    schema_name: \"ga4gh-testbed-report\",\n    schema_version: \"0.1.0\",\n    testbed_name: \"Unspecified GA4GH Testbed\",\n    testbed_version: \"v1.0.0\",\n    testbed_description: \"A generic testbed\",\n    platform_name: \"GA4GH Starter Kit Reference Deployment\",\n    platform_description: \"Reference deployment of the GA4GH Starter Kit running on AWS\",\n    input_parameters: {\n        token: \"[SECURE]\",\n        url: \"https://some-site.genomics.org\"\n    },\n    start_time: \"2021-10-22T15:00:00Z\",\n    end_time: \"2021-10-22T15:30:00Z\",\n    status: \"FAIL\",\n    summary: {\n        unknown: 0,\n        passed: 3,\n        warned: 1,\n        failed: 1,\n        skipped: 3\n    },\n    phases: [\n        {\n            phase_name: \"Sequences\",\n            phase_description: \"Tests all sequence endpoints\",\n            start_time: \"2021-10-22T15:00:00Z\",\n            end_time: \"2021-10-22T15:30:00Z\",\n            status: \"WARN\",\n            summary: {\n                unknown: 0,\n                passed: 2,\n                warned: 1,\n                failed: 0,\n                skipped: 1\n            },\n            tests: [\n                {\n                    test_name: \"Get Sequence\",\n                    test_description: \"Get a reference sequence\",\n                    start_time: \"2021-10-22T15:00:00Z\",\n                    end_time: \"2021-10-22T15:30:00Z\",\n                    status: \"PASS\",\n                    summary: {\n                        unknown: 0,\n                        passed: 1,\n                        warned: 0,\n                        failed: 0,\n                        skipped: 1\n                    },\n                    cases: [\n                        {\n                            case_name: \"Get e. coli\",\n                            case_description: \"Get e. coli reference sequence\",\n                            log_messages: [\n                                \"log message A\",\n                                \"log message B\"\n                            ],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"PASS\",\n                            message: \"Retrieved successfully\"\n                        },\n                        {\n                            case_name: \"Get s. cerevisiae\",\n                            case_description: \"Get s. cerevisiae reference sequence\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"SKIP\",\n                            message: \"Skipping test\"\n                        }\n                    ]\n                },\n                {\n                    test_name: \"List Sequences\",\n                    test_description: \"List reference sequences\",\n                    start_time: \"2021-10-22T15:00:00Z\",\n                    end_time: \"2021-10-22T15:30:00Z\",\n                    status: \"WARN\",\n                    summary: {\n                        unknown: 0,\n                        passed: 1,\n                        warned: 1,\n                        failed: 0,\n                        skipped: 0\n                    },\n                    cases: [\n                        {\n                            case_name: \"List bacterial sequences\",\n                            case_description: \"List all bacterial reference sequences\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"WARN\",\n                            message: \"Passed with some warnings\"\n                        },\n                        {\n                            case_name: \"List fungal sequences\",\n                            case_description: \"List all fungal reference sequences\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"PASS\",\n                            message: \"All fungal sequences retrieved\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            phase_name: \"Variants\",\n            phase_description: \"Tests all variants endpoints\",\n            start_time: \"2021-10-22T15:00:00Z\",\n            end_time: \"2021-10-22T15:30:00Z\",\n            status: \"FAIL\",\n            summary: {\n                unknown: 0,\n                passed: 1,\n                warned: 0,\n                failed: 1,\n                skipped: 2\n            },\n            tests: [\n                {\n                    test_name: \"Get Variant\",\n                    test_description: \"Get an observed variant\",\n                    start_time: \"2021-10-22T15:00:00Z\",\n                    end_time: \"2021-10-22T15:30:00Z\",\n                    status: \"FAIL\",\n                    summary: {\n                        unknown: 0,\n                        passed: 1,\n                        warned: 0,\n                        failed: 1,\n                        skipped: 0\n                    },\n                    cases: [\n                        {\n                            case_name: \"Get synonymous mutation\",\n                            case_description: \"Get the specified synonymous mutation\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"PASS\",\n                            message: \"Retrieved successfully\"\n                        },\n                        {\n                            case_name: \"Get non-synonymous mutation\",\n                            case_description: \"Get the specified non-synonymous mutation\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"FAIL\",\n                            message: \"Failed to retrieve the specified non-synonymous mutation\"\n                        }\n                    ]\n                },\n                {\n                    test_name: \"List Variants\",\n                    test_description: \"Get filtered lists of desired variants\",\n                    start_time: \"2021-10-22T15:00:00Z\",\n                    end_time: \"2021-10-22T15:30:00Z\",\n                    status: \"SKIP\",\n                    summary: {\n                        unknown: 0,\n                        passed: 0,\n                        warned: 0,\n                        failed: 0,\n                        skipped: 2\n                    },\n                    cases: [\n                        {\n                            case_name: \"List synonymous mutations\",\n                            case_description: \"List all synonymous mutations\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"SKIP\",\n                            message: \"Test skipped\"\n                        },\n                        {\n                            case_name: \"List non-synonymous mutations\",\n                            case_description: \"List all non-synonymous mutations\",\n                            log_messages: [],\n                            start_time: \"2021-10-22T15:00:00Z\",\n                            end_time: \"2021-10-22T15:30:00Z\",\n                            status: \"SKIP\",\n                            message: \"Test skipped\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n\nexport {\n    defaultReport\n}","import { makeStyles } from '@mui/styles';\n\nconst progressBarStyles = makeStyles((theme) => ({\n    div: {\n        marginTop: 25,\n        marginBottom: 25,\n        width: '100%',\n        height: '1.5em'\n    },\n    cellPass: {\n        backgroundColor: theme.palette.success.light,\n        border: `1px solid ${theme.palette.success.main}`,\n        height: '1.5em',\n        display: 'inline-block'\n    },\n    cellWarn: {\n        backgroundColor: theme.palette.warning.light,\n        border: `1px solid ${theme.palette.warning.main}`,\n        height: '1.5em',\n        display: 'inline-block'\n    },\n    cellFail: {\n        backgroundColor: theme.palette.error.light,\n        border: `1px solid ${theme.palette.error.main}`,\n        height: '1.5em',\n        display: 'inline-block'\n    },\n    cellSkip: {\n        backgroundColor: theme.palette.info.light,\n        border: `1px solid ${theme.palette.info.main}`,\n        height: '1.5em',\n        display: 'inline-block'\n    }\n}));\n\nexport default progressBarStyles;","import React from 'react';\nimport { Tooltip } from '@mui/material';\nimport progressBarStyles from '../../../styles/common/info/progressBarStyles';\n\nconst ProgressBar = props => {\n    const classes = progressBarStyles();\n\n    const cellClasses = {\n        PASS: classes.cellPass,\n        WARN: classes.cellWarn,\n        FAIL: classes.cellFail,\n        SKIP: classes.cellSkip\n    }\n\n    console.log(props.cases)\n\n    return (\n        <div className={classes.div}>\n            {props.cases.map((testCase, i) => {\n                const widthPercent = 100.0 / props.cases.length;\n                const styles = {\n                    width: `calc(${widthPercent}% - 3px`\n                }\n                if (i === 0) {\n                    styles.borderTopLeftRadius = '25px'\n                    styles.borderBottomLeftRadius = '25px'\n                }\n                if (i === props.cases.length - 1) {\n                    styles.borderTopRightRadius = '25px'\n                    styles.borderBottomRightRadius = '25px'\n                }\n\n                return (\n                    <Tooltip\n                        title={`${testCase.phase_name} -> ${testCase.test_name} -> ${testCase.case_name}`}\n                    >\n                        <div style={styles} className={cellClasses[testCase.status]} />\n                    </Tooltip>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default ProgressBar;","import React from 'react';\nimport { Chip } from '@mui/material';\nimport CheckIcon from '@mui/icons-material/CheckCircleOutline';\nimport WarnIcon from '@mui/icons-material/WarningAmber';\nimport FailIcon from '@mui/icons-material/ErrorOutline';\nimport SkipIcon from '@mui/icons-material/Block';\n\n\nconst StatusChip = props => {\n\n    const reportLevel = props.reportLevel || \"\";\n    const text = `${reportLevel} Status: ${props.status}`;\n    const severities = {\n        PASS: \"success\",\n        WARN: \"warning\",\n        FAIL: \"error\",\n        SKIP: \"info\"\n    }\n    const icons = {\n        PASS: <CheckIcon />,\n        WARN: <WarnIcon />,\n        FAIL: <FailIcon />,\n        SKIP: <SkipIcon />\n    }\n\n    return (\n        <Chip\n            icon={icons[props.status]}\n            color={severities[props.status]}\n            variant=\"contained\"\n            label={text}\n        />\n    )\n}\n\nexport default StatusChip;","import { makeStyles } from '@mui/styles';\n\nconst statusTableStyles = makeStyles((theme) => ({\n    table: {\n        marginBottom: 25\n    },\n    passRow: {\n        borderBottom: `2px solid ${theme.palette.success.main}`,\n        backgroundColor: theme.palette.success.light + \"60\"\n    },\n    warnRow: {\n        borderBottom: `2px solid ${theme.palette.warning.main}`,\n        backgroundColor: theme.palette.warning.light + \"60\"\n    },\n    failRow: {\n        borderBottom: `2px solid ${theme.palette.error.main}`,\n        backgroundColor: theme.palette.error.light + \"60\"\n    },\n    skipRow: {\n        borderBottom: `2px solid ${theme.palette.info.main}`,\n        backgroundColor: theme.palette.info.light + \"60\"\n    }\n}))\n\nexport default statusTableStyles;","import { makeStyles } from '@mui/styles';\n\nconst reportButtonStyles = makeStyles((theme) => ({\n    button: {\n        margin: '10px'\n    }\n}));\n\nexport default reportButtonStyles;\n","import React from 'react';\nimport {\n    Button\n} from '@mui/material';\nimport CheckIcon from '@mui/icons-material/CheckCircleOutline';\nimport WarnIcon from '@mui/icons-material/WarningAmber';\nimport FailIcon from '@mui/icons-material/ErrorOutline';\nimport SkipIcon from '@mui/icons-material/Block';\nimport reportButtonStyles from '../../../styles/common/navigation/reportButtonStyles';\n\nconst ReportButton = props => {\n    const classes = reportButtonStyles();\n\n    const severities = {\n        PASS: \"success\",\n        WARN: \"warning\",\n        FAIL: \"error\",\n        SKIP: \"info\"\n    }\n\n    const icons = {\n        PASS: <CheckIcon />,\n        WARN: <WarnIcon />,\n        FAIL: <FailIcon />,\n        SKIP: <SkipIcon />\n    }\n\n    const useColor = props.useColor === undefined ? true: props.useColor;\n    const useIcon = props.useIcon === undefined ? true: props.useIcon;\n    const startIcon = useIcon ? icons[props.status] : null;\n    const color = useColor ? severities[props.status] : \"neutral\";\n    const variant = props.variant || \"outlined\";\n    const size = props.size || \"medium\"\n\n    return (\n        <span className={classes.button}>\n            <Button\n                startIcon={startIcon}\n                color={color}\n                variant={variant}\n                size={size}\n                href={`#${props.to}`}\n            >\n                {props.label}\n            </Button>\n        </span>\n    )\n}\n\nexport default ReportButton;","const formatForDomId = stringArray => {\n    let processedStringArray = stringArray.map(s => {\n        return s.toLowerCase().replaceAll('.','').replaceAll(' ','');\n    })\n    return processedStringArray.join('-')\n}\n\nexport {\n    formatForDomId\n}","import React from 'react';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport StatusChip from './StatusChip';\nimport statusTableStyles from '../../../styles/common/info/statusTableStyles';\nimport ReportButton from '../navigation/ReportButton';\nimport { formatForDomId } from '../../../utils/stringUtils';\n\nconst StatusTable = props => {\n    const classes = statusTableStyles()\n\n    const rowClasses = {\n        PASS: classes.passRow,\n        WARN: classes.warnRow,\n        FAIL: classes.failRow,\n        SKIP: classes.skipRow\n    }\n\n    return (\n        <TableContainer component={Paper} className={classes.table}>\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Phase</TableCell>\n                        <TableCell>Test</TableCell>\n                        <TableCell>Case</TableCell>\n                        <TableCell>Status</TableCell>\n                        <TableCell>View</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.phases.map(phase => {\n                        const phaseRow = (\n                            <TableRow className={rowClasses[phase.status]}>\n                                <TableCell>{phase.phase_name}</TableCell>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                                <TableCell>\n                                    <StatusChip\n                                        status={phase.status}\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <ReportButton\n                                        useColor={true}\n                                        useIcon={false}\n                                        variant=\"contained\"\n                                        label=\"View\"\n                                        status={phase.status}\n                                        to={formatForDomId([\n                                            phase.phase_name\n                                        ])}\n                                     />\n                                </TableCell>\n                            </TableRow>\n                        )\n\n                        const testAndCaseRows = phase.tests.map(test => {\n                            const testRow = (\n                                <TableRow className={rowClasses[test.status]}>\n                                    <TableCell>{phase.phase_name}</TableCell>\n                                    <TableCell>{test.test_name}</TableCell>\n                                    <TableCell></TableCell>\n                                    <TableCell>\n                                        <StatusChip\n                                            status={test.status}\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <ReportButton\n                                            useColor={true}\n                                            useIcon={false}\n                                            variant=\"contained\"\n                                            label=\"View\"\n                                            status={test.status}\n                                            to={formatForDomId([\n                                                phase.phase_name,\n                                                test.test_name\n                                            ])}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            )\n\n                            const caseRows = test.cases.map(testCase => {\n                                return (\n                                    <TableRow className={rowClasses[testCase.status]}>\n                                        <TableCell>{phase.phase_name}</TableCell>\n                                        <TableCell>{test.test_name}</TableCell>\n                                        <TableCell>{testCase.case_name}</TableCell>\n                                        <TableCell>\n                                            <StatusChip\n                                                status={testCase.status}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <ReportButton\n                                                useColor={true}\n                                                useIcon={false}\n                                                variant=\"contained\"\n                                                label=\"View\"\n                                                status={testCase.status}\n                                                to={formatForDomId([\n                                                    phase.phase_name,\n                                                    test.test_name,\n                                                    testCase.case_name\n                                                ])}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                )\n                            })\n\n                            return [testRow, ...caseRows]\n                        })\n\n                        return ([\n                            phaseRow,\n                            ...testAndCaseRows\n                        ])\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n\n}\n\nexport default StatusTable;","import { makeStyles } from '@mui/styles';\n\nconst reportInfoTableStyles = makeStyles((theme) => ({\n    table: {\n        marginBottom: 25\n    }\n}))\n\nexport default reportInfoTableStyles;","import React from 'react';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper\n} from '@mui/material';\nimport reportInfoTableStyles from '../../../styles/common/info/reportInfoTableStyles';\n\nconst ReportInfoTable = props => {\n    const classes = reportInfoTableStyles();\n\n    return (\n        <TableContainer component={Paper} className={classes.table}>\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        {props.header.map(hc => <TableCell>{hc}</TableCell>)}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        props.rows.map(row => {\n                            return (\n                                <TableRow>\n                                    <TableCell>{row.label}</TableCell>\n                                    <TableCell>{row.value}</TableCell>\n                                </TableRow>\n                            )\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nexport default ReportInfoTable;","import { makeStyles } from '@mui/styles';\n\nconst reportBreadcrumbsStyles = makeStyles((theme) => ({\n    div: {\n        marginTop: 10,\n        marginRight: 25,\n        display: \"inline-block\"\n    },\n    reportBreadcrumbs: {\n        fontSize: '2.0em',\n        color: theme.palette.primary.main\n    }\n}));\n\nexport default reportBreadcrumbsStyles;\n","import React from 'react';\nimport {\n    Typography,\n    Breadcrumbs,\n    Link\n} from '@mui/material';\nimport reportBreadcrumbsStyles from '../../../styles/common/navigation/reportBreadcrumbsStyles';\n\nconst ReportBreadcrumbs = props => {\n    const classes = reportBreadcrumbsStyles();\n\n    return (\n        <div\n            id={props.id}\n            className={classes.div}\n        >\n            <Breadcrumbs separator=\"/\" className={classes.reportBreadcrumbs}>\n                {props.breadcrumbs.map(item => {\n                    return (\n                        <Link\n                            color='inherit'\n                            href={`#${item.to}`}\n                        >\n                            {item.label}\n                        </Link>\n                    )\n                })}\n            </Breadcrumbs>\n        </div>\n    )\n}\n\nexport default ReportBreadcrumbs;","const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n]\n\nconst months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n]\n\nconst addLeadingChars = (leadingChar, totalN, string) => {\n    return leadingChar.repeat(totalN - string.length) + string;\n}\n\nconst formatDate = dateString => {\n    let d = new Date(dateString);\n    return `${days[d.getUTCDay()]},`\n        + ` ${months[d.getUTCMonth()]}`\n        + ` ${d.getUTCDate()},`\n        + ` ${d.getUTCFullYear()}`\n        + ` @ ${addLeadingChars(\"0\", 2, d.getUTCHours().toString())}`\n        + `:${addLeadingChars(\"0\", 2, d.getUTCMinutes().toString())}`\n        + `:${addLeadingChars(\"0\", 2, d.getUTCSeconds().toString())}`\n        + \" UTC\";\n    \n}\n\nexport {\n    formatDate\n}","import { makeStyles } from '@mui/styles';\n\nconst reportButtonGroupStyles = makeStyles((theme) => ({\n    group: {\n        marginTop: 20,\n        textAlign: 'center'\n    }\n}));\n\nexport default reportButtonGroupStyles;","import { makeStyles } from '@mui/styles';\n\nconst caseStyles = makeStyles((theme) => ({\n    div: {\n        paddingLeft: 100,\n        paddingTop: 10,\n        paddingBottom: 10,\n    }\n}))\n\nexport default caseStyles;","import React from 'react';\nimport { Typography } from '@mui/material';\n\nconst Log = props => {\n    return (\n        <div>\n            {props.messages.map(message => {\n                return (\n                    <Typography>{message}</Typography>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Log;","import React from 'react';\nimport ReportBreadcrumbs from '../../common/navigation/ReportBreadcrumbs';\nimport StatusChip from '../../common/info/StatusChip';\nimport { formatForDomId } from '../../../utils/stringUtils';\nimport { Typography } from '@mui/material';\nimport caseStyles from '../../../styles/pages/report/caseStyles';\nimport Log from './Log';\n\nconst Case = props => {\n    const classes = caseStyles();\n\n    const breadcrumbs = [\n        {\n            label: `Phase: ${props.phaseName}`,\n            to: formatForDomId([props.phaseName])\n        },\n        {\n            label: `Test: ${props.testName}`,\n            to: formatForDomId([props.phaseName, props.testName])\n        },\n        {\n            label: `Case: ${props.testCase.case_name}`,\n            to: formatForDomId([props.phaseName, props.testName, props.testCase.case_name])\n        }\n    ]\n\n    return (\n        <div className={classes.div}>\n            {/* Breadcrumb */}\n            <ReportBreadcrumbs\n                id={formatForDomId([\n                    props.phaseName,\n                    props.testName,\n                    props.testCase.case_name\n                ])}\n                breadcrumbs={breadcrumbs}\n            />\n            \n            {/* Status */}\n            <StatusChip\n                reportLevel=\"Case\"\n                status={props.testCase.status}\n            />\n\n            {/* Info */}\n            <Typography variant=\"body1\">\n                <strong>Description: </strong>\n                {props.testCase.case_description}\n            </Typography>\n            <Typography variant=\"body1\">\n                <strong>Message: </strong>\n                {props.testCase.message}\n            </Typography>\n\n            {/* Message Log */}\n            {props.testCase.log_messages.length > 0\n                ? <Log messages={props.testCase.log_messages} />\n                : null\n            }\n\n        </div>\n    )\n}\n\nexport default Case;\n","import { makeStyles } from '@mui/styles';\n\nconst testStyles = makeStyles((theme) => ({\n    div: {\n        paddingLeft: 50,\n        paddingTop: 15,\n        paddingBottom: 15,\n    }\n}))\n\nexport default testStyles;","import React from 'react';\nimport {\n    Typography,\n    Grid\n} from '@mui/material';\nimport ReportBreadcrumbs from '../../common/navigation/ReportBreadcrumbs';\nimport StatusChip from '../../common/info/StatusChip';\nimport ReportInfoTable from '../../common/info/ReportInfoTable';\nimport SummaryTable from '../../common/info/SummaryTable';\nimport ReportButtonGroup from '../../common/navigation/ReportButtonGroup';\nimport ReportButton from '../../common/navigation/ReportButton';\nimport { formatForDomId } from '../../../utils/stringUtils';\nimport { formatDate } from '../../../utils/dateUtils';\nimport Case from './Case';\nimport testStyles from '../../../styles/pages/report/testStyles';\n\nconst Test = props => {\n    const classes = testStyles();\n\n    const breadcrumbs = [\n        {\n            label: `Phase: ${props.phaseName}`,\n            to: formatForDomId([props.phaseName])\n        },\n        {\n            label: `Test: ${props.test.test_name}`,\n            to: formatForDomId([props.phaseName, props.test.test_name])\n        }\n    ]\n\n    const testInfo = {\n        header: [\"Test Info Key\", \"Value\"],\n        rows: [\n            {label: \"Test Description\", value: props.test.test_description},\n            {label: \"Start Time\", value: formatDate(props.test.start_time)},\n            {label: \"End Time\", value: formatDate(props.test.end_time)}\n        ]\n    }\n\n    const reportButtonGroup = props.test.cases.map(testCase => {\n        return {\n            status: testCase.status,\n            label: `View Case: ${testCase.case_name}`,\n            to: formatForDomId([\n                props.phaseName,\n                props.test.test_name,\n                testCase.case_name\n            ]),\n            size: 'small'\n        }\n    })\n\n    return (\n        <div className={classes.div}>\n            {/* Breadcrumb */}\n            <ReportBreadcrumbs\n                id={formatForDomId([\n                    props.phaseName,\n                    props.test.test_name\n                ])}\n                breadcrumbs={breadcrumbs}\n            />\n            \n            {/* Status */}\n            <StatusChip\n                reportLevel=\"Test\"\n                status={props.test.status}\n            />\n\n            {/* Info & Summary */}\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Typography variant=\"body1\">\n                        <strong>Description: </strong>\n                        {props.test.test_description}\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            {/* Subcomponent */}\n            {props.test.cases.map(testCase => {\n                return (\n                    <Case\n                        testCase={testCase}\n                        phaseName={props.phaseName}\n                        testName={props.test.test_name}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Test;\n","import { makeStyles } from '@mui/styles';\n\nconst phaseStyles = makeStyles((theme) => ({\n    div: {\n        paddingTop: 25,\n        paddingBottom: 25,\n        borderBottom: `1px solid #909090`\n    }\n}))\n\nexport default phaseStyles;","import React from 'react';\nimport {\n    Typography,\n    Grid,\n    Chip\n} from '@mui/material';\nimport ReportBreadcrumbs from '../../common/navigation/ReportBreadcrumbs';\nimport StatusChip from '../../common/info/StatusChip';\nimport SummaryTable from '../../common/info/SummaryTable';\nimport ReportButtonGroup from '../../common/navigation/ReportButtonGroup';\nimport ReportButton from '../../common/navigation/ReportButton';\nimport { formatForDomId } from '../../../utils/stringUtils';\nimport { formatDate } from '../../../utils/dateUtils';\nimport Test from './Test';\nimport phaseStyles from '../../../styles/pages/report/phaseStyles';\n\nconst Phase = props => {\n    const classes = phaseStyles();\n\n    const breadcrumbs = [\n        {\n            label: `Phase: ${props.phase.phase_name}`,\n            to: formatForDomId([props.phase.phase_name])\n        }\n    ]\n\n    const reportButtonGroup = props.phase.tests.map(test => {\n        return {\n            status: test.status,\n            label: `View Test: ${test.test_name}`,\n            to: formatForDomId([props.phase.phase_name, test.test_name]),\n            size: 'large'\n        }\n    })\n\n    return (\n        <div className={classes.div}>\n            {/* Breadcrumb */}\n            <ReportBreadcrumbs\n                id={formatForDomId([props.phase.phase_name])}\n                breadcrumbs={breadcrumbs}\n            />\n\n            {/* Status */}\n            <StatusChip\n                reportLevel=\"Phase\"\n                status={props.phase.status}\n            />\n\n            {/* Info & Summary */}\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Typography variant=\"body1\">\n                        <strong>Description: </strong>\n                        {props.phase.phase_description}\n                    </Typography>\n                </Grid>\n            </Grid>\n\n            {/* Subcomponent */}\n            {props.phase.tests.map(test => {\n                return (\n                    <Test\n                        test={test}\n                        phaseName={props.phase.phase_name}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Phase;\n","const flattenReportCases = report => {\n    let cases = [];\n    report.phases.forEach(phase => {\n        phase.tests.forEach(test => {\n            test.cases.forEach(testCase => {\n                let newCase = {...testCase};\n                newCase.phase_name = phase.phase_name;\n                newCase.test_name = test.test_name;\n                cases.push(newCase);\n            })\n        })\n    })\n    return cases;\n}\n\nexport {\n    flattenReportCases\n}","import React from 'react';\nimport {\n    Tooltip\n} from '@mui/material';\nimport {\n    Help\n} from '@mui/icons-material';\n\nconst HelpBubble = props => {\n    return (\n        <Tooltip title={props.message}>\n            <Help color='primary' fontSize=\"small\" />\n        </Tooltip>\n    )\n}\n\nexport default HelpBubble;\n","import React from 'react';\nimport {\n    useParams\n} from 'react-router-dom';\nimport {\n    Typography,\n    Grid\n} from '@mui/material';\nimport StatusAlert from '../../common/info/StatusAlert';\nimport {\n    PageContainer\n} from '../../common/layout';\nimport { defaultReport } from '../../../constants/defaultReports';\nimport ProgressBar from '../../common/info/ProgressBar';\nimport StatusTable from '../../common/info/StatusTable';\nimport SummaryTable from '../../common/info/SummaryTable';\nimport ReportInfoTable from '../../common/info/ReportInfoTable';\nimport Phase from './Phase';\nimport { formatForDomId } from '../../../utils/stringUtils';\nimport { formatDate } from '../../../utils/dateUtils';\nimport { flattenReportCases } from '../../../utils/reportUtils';\nimport HelpBubble from '../../common/info/HelpBubble';\nimport ReportButtonGroup from '../../common/navigation/ReportButtonGroup';\n\nconst Report = props => {\n    let { testbedId, seriesId, reportId } = useParams();\n\n    // TODO: use non-hardcoded report pulled from API\n    const reportObj = defaultReport;\n    const reportInfo = {\n        header: [\"Report Info Key\", \"Value\"],\n        rows: [\n            {label: \"Testbed Name\", value: reportObj[\"testbed_name\"]},\n            {label: \"Testbed Version\", value: reportObj[\"testbed_version\"]},\n            {label: \"Testbed Description\", value: reportObj[\"testbed_description\"]},\n            {label: \"Platform Name\", value: reportObj[\"platform_name\"]},\n            {label: \"Platform Description\", value: reportObj[\"platform_description\"]},\n            {label: \"Start Time\", value: formatDate(reportObj[\"start_time\"])},\n            {label: \"End Time\", value: formatDate(reportObj[\"end_time\"])}\n        ]\n    }\n    const inputParameterInfo = {\n        header: [\"Param Name\", \"Param Value\"],\n        rows: Object.keys(reportObj.input_parameters).map(key => {\n            return {label: key, value: reportObj.input_parameters[key]}\n        })\n    }\n\n    return (\n        <PageContainer>\n            <Typography variant=\"h5\">Test Report</Typography>\n\n            <Typography variant=\"body1\">\n                <strong>Testbed: </strong>\n                {reportObj.testbed_name}\n            </Typography>\n            <Typography variant=\"body1\">\n                <strong>Testbed Version: </strong>\n                {reportObj.testbed_version}\n            </Typography>\n            <Typography variant=\"body1\">\n                <strong>Platform: </strong>\n                {reportObj.platform_name}\n            </Typography>\n\n            <StatusAlert\n                reportLevel=\"Test\"\n                status={reportObj.status}\n                size=\"full\"\n            />\n\n            <Typography display=\"inline\" variant=\"h5\">Test Trace</Typography>\n            <HelpBubble\n                message=\"Displays the status of each test case, in the order \n                    they were encountered during test execution. Mouse over a\n                    cell to see the test case.\"\n            />\n            <ProgressBar cases={flattenReportCases(reportObj)} />\n\n            <Typography display=\"inline\" variant=\"h5\">Test Status</Typography>\n            <HelpBubble\n                message=\"Shows the status of each phase, test, and test case in\n                    table format. Click the 'View' button to see the full\n                    report for the corresponding test component.\"\n            />\n            <Typography variant=\"body1\">\n                <strong>Passed: </strong>\n                {reportObj.summary.passed}\n                <strong> Warned: </strong>\n                {reportObj.summary.warned}\n                <strong> Failed: </strong>\n                {reportObj.summary.failed}\n                <strong> Skipped: </strong>\n                {reportObj.summary.skipped}\n                <strong> Unknown: </strong>\n                {reportObj.summary.unknown}\n            </Typography>\n            <StatusTable phases={reportObj.phases} />\n\n            <Typography display=\"inline\" variant=\"h6\">Report Info</Typography>\n            <HelpBubble\n                message=\"Summary information for this test report, including\n                    the testbed that was run, the platform it was run on, and\n                    when the tests were executed.\"\n            />\n            <ReportInfoTable {...reportInfo} />\n                \n\n                \n            <Typography display=\"inline\" variant=\"h6\">Input Parameters</Typography>\n            <HelpBubble\n                message=\"Input parameters provided to the testbed application.\"\n            />\n            <ReportInfoTable {...inputParameterInfo} />\n                \n\n            {/* Subcomponent */}\n            <Typography display=\"inline\" variant=\"h5\">Full Report</Typography>\n            <HelpBubble\n                message=\"Full breakdown of all report phases, tests, and test\n                    cases. Displays full log information for each test case.\"\n            />\n            {reportObj.phases.map(phase => <Phase phase={phase} />)}\n\n        </PageContainer>\n    )\n}\n\nexport default Report;\n","import { createTheme } from \"@mui/material/styles\";\n\nconst theme = createTheme({\n    status: {\n        neutral: '#355e3b'\n    },\n    palette: {\n        primary: {\n            main: '#2f75bb'\n        },\n        secondary: {\n            // main: '#4faedc'\n            main: '#9f7ab0'\n        },\n        neutral: {\n            main: '#64748B',\n            contrastText: '#fff',\n        }\n        // error: {\n        //     main: '#e34a3b'\n        // },\n        // warning: {\n        //     main: '#f9a533'\n        // },\n        // success: {\n        //     main: '#8bc53f'\n        // }\n    },\n    \n    typography: {\n        fontFamily: '\"Helvetica Neue\"'\n    }\n});\n\nexport default theme;\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport { ThemeProvider } from '@mui/material/styles';\nimport TestbedReportingAppBar from './lib/components/common/navigation/TestbedReportingAppBar';\nimport Home from './lib/components/pages/Home';\nimport Report from './lib/components/pages/report/Report';\nimport theme from './lib/styles/theme';\n\nconst App = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <BrowserRouter>\n                <TestbedReportingAppBar />\n                <Switch>\n                    <Route exact path='/' component={Home} />\n                    <Route exact path='/testbeds/:testbedId/series/:seriesId/reports/:reportId' component={Report} />\n                </Switch>\n            </BrowserRouter>\n        </ThemeProvider>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}